section
    h1 OSGi

section#osgi-definition
    .vcenter
        h2 Official Definition
        p OSGi technology is the dynamic module system for Java™. The OSGi Service Platform provides functionality to Java that makes Java the premier environment for software integration and thus for development. Java provides the portability that is required to support products on many different platforms. The OSGi technology provides the standardized primitives that allow applications to be constructed from small, reusable and collaborative components. These components can be composed into an application and deployed.
        p The OSGi Service Platform provides the functions to change the composition dynamically on the device of a variety of networks, without requiring restarts. To minimize the coupling, as well as make these couplings managed, the OSGi technology provides a service-oriented architecture that enables these components to dynamically discover each other for collaboration. The OSGi Alliance has developed many standard component interfaces for common functions like HTTP servers, configuration, logging, security, user administration, XML and many more. Plug-compatible implementations of these components can be obtained from different vendors with different optimizations and costs. However, service interfaces can also be developed on a proprietary basis.

section
    .vcenter
        h2 tl;dr

section
    .vcenter
        p.strong It’s a specification
        p (with several major implementations)

section
    .vcenter
        p.strong Extremely lightweight
        p (originally created in 1999 for embedded devices)

section
    .vcenter
        p.strong All about Modularity
        p (defined in terms of "bundles" and "services")

section
    .vcenter
        p.strong Services use the publish/find/bind model
        p (usually based on interfaces, but can be much more)

section
    .vcenter
        p.strong Full lifecycle support for both bundles and services
        p (dependency injection, configuration management, etc.)

section
    .vcenter
        p.strong Fully dynamic
        p (bundles/services are expected to come and go regularly)

section
    .vcenter
        p.strong Sane classloaders
        p (no split packages, explicit version management, fast graph traversal, etc.)
